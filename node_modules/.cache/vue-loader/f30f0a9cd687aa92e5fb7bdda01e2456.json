{"remainingRequest":"/Users/liyulong/项目/mhxy/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/liyulong/项目/mhxy/src/views/guide/index.vue?vue&type=style&index=0&id=2f057756&lang=scss&scoped=true&","dependencies":[{"path":"/Users/liyulong/项目/mhxy/src/views/guide/index.vue","mtime":1654431173962},{"path":"/Users/liyulong/项目/mhxy/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liyulong/项目/mhxy/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/liyulong/项目/mhxy/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/liyulong/项目/mhxy/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liyulong/项目/mhxy/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liyulong/项目/mhxy/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKOjp2LWRlZXAgLnctZS10ZXh0LWNvbnRhaW5lciB7CiAgbWluLWhlaWdodDogMTAwcHg7CiAgbWF4LWhlaWdodDogMzAwcHg7CiAgaGVpZ2h0OiBhdXRvICFpbXBvcnRhbnQ7CiAgYm9yZGVyOiAxcHggc29saWQgI2RiZGJkYiAhaW1wb3J0YW50OwogIGJvcmRlci1yYWRpdXM6IDRweDsKICBvdmVyZmxvdy15OiBhdXRvOwp9Ci5kcm9wRG93bkxpc3QgewogICBkaXNwbGF5OiBub25lOwogICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgIGhlaWdodDogOTZweDsKICAgd2lkdGg6IDE3NXB4OwogICBib3gtc2l6aW5nOiBib3JkZXItYm94OwogICBwYWRkaW5nOiA4cHg7CiAgIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMSk7CiAgIGJvcmRlci1yYWRpdXM6IDRweDsKICAgYm94LXNoYWRvdzogMCAycHggNHB4IDAgcmdiYSgwLCAwLCAwLCAwLjEpOwogICBvdmVyZmxvdzogYXV0bzsKCiAgIC5vcHRpb24gewogICAgd2lkdGg6IDEwMCU7CiAgICBoZWlnaHQ6IDIwcHg7CiAgICB0ZXh0LWFsaWduOiBsZWZ0ICFpbXBvcnRhbnQ7CiAgICBjb2xvcjogKDUxLCA1MSwgNTEsIDEpOwogICAgLyogYmFja2dyb3VuZC1jb2xvcjogI2JhZjsgKi8KICAgIGxpbmUtaGVpZ2h0OiAyMHB4OwogICB9CiAgfQo="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/guide","sourcesContent":["<template>\n  <div class=\"app-container\">\n    <!-- <aside>\n      The guide page is useful for some people who entered the project for the first time. You can briefly introduce the\n      features of the project. Demo is based on\n      <a href=\"https://github.com/kamranahmedse/driver.js\" target=\"_blank\">driver.js.</a>\n    </aside>\n    <el-button icon=\"el-icon-question\" type=\"primary\" @click.prevent.stop=\"guide\">\n      Show Guide\n    </el-button> -->\n    <div\n      ref=\"editor\"\n      @compositionstart=\"compositionstart\"\n      @compositionend=\"compositionend\"\n      @keydown=\"onKeyDownInput($event)\"\n    ></div>\n    <div class=\"dropDownList\" ref=\"dropDownDiv\">\n     <div class=\"option\" v-for=\"(item,index) in dropDownList\" :key=\"item.value\"\n      v-on:mouseover=\"changeActive(index)\" v-on:mouseout=\"removeActive(index)\" @click=\"optOf(item)\"\n      ref=\"abc\">\n      <span>{{item.label}}</span>\n     </div>\n    </div>\n  </div>\n</template>\n\n<script>\n// import Driver from 'driver.js' // import driver.js\n// import 'driver.js/dist/driver.min.css' // import driver.js css\n// import steps from './steps'\n\n// export default {\n//   name: 'Guide',\n//   data() {\n//     return {\n//       driver: null\n//     }\n//   },\n//   mounted() {\n//     this.driver = new Driver()\n//   },\n//   methods: {\n//     guide() {\n//       this.driver.defineSteps(steps)\n//       this.driver.start()\n//     }\n\n//   }\n// }\nimport E from \"wangeditor\";\nexport default {\n  data() {\n    return {\n      editor: \"\",\n      isChineseInputMethod: false ,// 是否中文输入法状态中\n      position: '',\n      dropDownList: [{\n     value: 1,\n     label: '一级'\n    }, {\n     value: 2,\n     label: '二级'\n    }, {\n     value: 3,\n     label: '三级'\n    }, {\n     value: 4,\n     label: '四级'\n    }, {\n     value: 5,\n     label: '五级'\n    }, {\n     value: 6,\n     label: '六级'\n    }, {\n     value: 7,\n     label: '七级'\n    }],\n    };\n  },\n  mounted() {\n    this.initEditor(); // 初始化编辑器\n  },\n  methods: {\n    changeActive(index) {\n    console.log(index)\n    // for(let i=0;i<this.$refs.abc.length;i++){\n    this.$refs.abc[index].style = \"color:rgba(60,110,240,1)\"\n    // }\n   },\n   removeActive(index) {\n    this.$refs.abc[index].style = \"color:rgba(51,51,51,1)\"\n   },\n   optOf(item) {\n    console.log(item)\n    this.createSelectElement(item.label,item.value)\n    this.$refs.dropDownDiv.style = \"display:none\"\n\n   },\n    initEditor() {\n      let editor = new E(this.$refs.editor);\n      editor.config.placeholder = \"写评论~可手动输入@通知其他人\";\n      editor.config.menus = []; // 显示菜单按钮\n      editor.config.showFullScreen = false; // 不显示全屏按钮\n      editor.config.pasteIgnoreImg = true; // 如果复制的内容有图片又有文字，则只粘贴文字，不粘贴图片。\n      editor.config.height = \"100\";\n      editor.config.focus = false; // 取消自动 focus\n      editor.create();\n      this.editor = editor;\n      // 销毁编辑器，定义与销毁应该在同一个地方，增加阅读性，方便后期维护。\n      this.$once(\"hook:beforeDestroy\", () => {\n        this.editor.destroy();\n        this.editor = null;\n      });\n      editor.config.onchange = html => {\n                // 生成@的标签的时候会触发渲染、此时不要记录光标坐标\n                if (this.isRendering == false) {\n                    this.setRecordCoordinates() // 记录坐标\n                }\n            }\n    },\n    // ...code\n        // 中文输入触发\n        compositionstart() {\n            this.isChineseInputMethod = true\n        },\n\n        // 中文输入关闭\n        compositionend() {\n            this.isChineseInputMethod = false\n        },\n        // 初始化编辑器\n        // initEditor() {\n        //     // ... init code\n        //     // 编辑的文本的时候记录光标。\n        //     editor.config.onchange = html => {\n        //         // 生成@的标签的时候会触发渲染、此时不要记录光标坐标\n        //         if (this.isRendering == false) {\n        //             this.setRecordCoordinates() // 记录坐标\n        //         }\n        //     }\n        // },\n        \n        // 每次点击获取更新坐标\n        onClickEditor() {\n            this.setRecordCoordinates()\n        },\n        \n        // keydown触发事件 记录光标\n        onKeyDownInput(e) {\n          // console.log(e.key)\n          //   const isCode = ((e.keyCode === 229 && e.key === '@') || (e.keyCode === 229 && e.code === 'Digit2') || e.keyCode === 50) && e.shiftKey\n          //   if (!this.isChineseInputMethod && isCode) {\n          //       this.setRecordCoordinates() // 保存坐标\n          //   }\n\n\n            // @的键盘时间判断\n    const isCode = ((e.keyCode === 229 && e.key === '@') || (e.keyCode === 229 && e.code === 'Digit2') || e.keyCode === 50) && e.shiftKey\n    // 判断状态是否不是中文输入法，并且监听到了@的事件\n    if (!this.isChineseInputMethod && isCode) {\n        // 记录当前文本光标坐标位置\n        this.setRecordCoordinates() // 保存坐标\n        this.$refs.dropDownDiv.style = \"display:block\"\n        // 打开弹窗的方法xxxx，这里就省略了\n        // this.open(this.$refs.dropDownDiv)\n    }\n        },\n        \n        // 获取当前光标坐标\n        setRecordCoordinates() {\n            try {\n                // getSelection() 返回一个 Selection 对象，表示用户选择的文本范围或光标的当前位置。\n                const selection = getSelection()\n                this.position = {\n                    range: selection.getRangeAt(0),\n                    selection: selection\n                }\n                console,log(this.position)\n            } catch (error) {\n                console.log(error, '光标获取失败～')\n                const selection = getSelection()\n                this.position = {\n                    range: selection.getRangeAt(0),\n                    selection: selection\n                }\n                console.log(this.position)\n            }\n        },\n        /**\n* 数据结构：\n* userList: [{name: '坏女人', uid: 18}, {name: '好男人', uid: 888}]\n*/\n\n//弹窗列表 - 选人 - 生成@的内容\ncreateSelectElement(name, id) {\n  let type = 'default'\n    // 获取当前文本光标的位置。\n    alert(name)\n    const { selection, range } = this.position\n    // 生成需要显示的内容\n    let spanNodeFirst = document.createElement('span')\n    spanNodeFirst.style.color = '#409EFF'\n    spanNodeFirst.innerHTML = `@${name}&nbsp;` // @的文本信息\n    spanNodeFirst.dataset.id = id // 用户ID、为后续解析富文本提供\n    spanNodeFirst.contentEditable = false // 当设置为false时，富文本会把成功文本视为一个节点。\n    \n    // 需要在字符前插入一个空格否则、在换行与两个@标签连续的时候导致无法删除标签\n    let spanNode = document.createElement('span');\n    spanNode.innerHTML = '&nbsp;';\n\n    //创建一个新的空白的文档片段，拆入对应文本内容\n    let frag = document.createDocumentFragment()\n    frag.appendChild(spanNode);\n    frag.appendChild(spanNodeFirst);\n\n    // 如果是键盘触发的默认删除面前的@，前文中我们没有阻止@的生成所以要删除@的再插入ps：如果你是数组遍历的请传入type 不然会一直删除你前面的字符。\n     if (type === 'default') {\n        const textNode = range.startContainer;\n        range.setStart(textNode, range.endOffset - 1);\n        range.setEnd(textNode, range.endOffset);\n        range.deleteContents();\n        this.isKeyboard = false // 针对多选的逻辑\n    }\n    \n    // 判断是否有文本、是否有坐标\n    if ((this.editor.txt.text() || type === 'default')&& this.position && range) {\n        range.insertNode(frag)\n    } else {\n        // 如果没有内容一开始就插入数据特别处理\n        this.editor.txt.append(`<span data-id=\"${id}\" style=\"color: #409EFF\" contentEditable=\"false\">@${name}&nbsp;</span>`)\n    }\n},\n\n\n\n\n\n  },\n   \n};\n</script>\n<style lang=\"scss\" scoped>\n::v-deep .w-e-text-container {\n  min-height: 100px;\n  max-height: 300px;\n  height: auto !important;\n  border: 1px solid #dbdbdb !important;\n  border-radius: 4px;\n  overflow-y: auto;\n}\n.dropDownList {\n   display: none;\n   position: absolute;\n   height: 96px;\n   width: 175px;\n   box-sizing: border-box;\n   padding: 8px;\n   background: rgba(255, 255, 255, 1);\n   border-radius: 4px;\n   box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.1);\n   overflow: auto;\n\n   .option {\n    width: 100%;\n    height: 20px;\n    text-align: left !important;\n    color: (51, 51, 51, 1);\n    /* background-color: #baf; */\n    line-height: 20px;\n   }\n  }\n</style>\n"]}]}