{"remainingRequest":"/Users/liyulong/项目/mhxy/node_modules/babel-loader/lib/index.js!/Users/liyulong/项目/mhxy/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/liyulong/项目/mhxy/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/liyulong/项目/mhxy/src/views/permission/role.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/liyulong/项目/mhxy/src/views/permission/role.vue","mtime":1638874516000},{"path":"/Users/liyulong/项目/mhxy/babel.config.js","mtime":1638874516000},{"path":"/Users/liyulong/项目/mhxy/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liyulong/项目/mhxy/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/liyulong/项目/mhxy/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liyulong/项目/mhxy/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"mappings":"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","names":["key","name","description","routes","data","role","rolesList","dialogVisible","dialogType","checkStrictly","defaultProps","children","label","computed","routesData","created","methods","getRoutes","res","getRoles","generateRoutes","route","path","title","generateArr","handleAddRole","handleEdit","scope","handleDelete","confirmButtonText","cancelButtonText","type","then","deleteRole","message","catch","console","generateTree","confirmRole","isEdit","checkedKeys","updateRole","index","addRole","dangerouslyUseHTMLString","onlyOneShowingChild","onlyOneChild","noShowingChildren"],"sourceRoot":"src/views/permission","sources":["role.vue"],"sourcesContent":["<template>\n  <div class=\"app-container\">\n    <el-button type=\"primary\" @click=\"handleAddRole\">New Role</el-button>\n\n    <el-table :data=\"rolesList\" style=\"width: 100%;margin-top:30px;\" border>\n      <el-table-column align=\"center\" label=\"Role Key\" width=\"220\">\n        <template slot-scope=\"scope\">\n          {{ scope.row.key }}\n        </template>\n      </el-table-column>\n      <el-table-column align=\"center\" label=\"Role Name\" width=\"220\">\n        <template slot-scope=\"scope\">\n          {{ scope.row.name }}\n        </template>\n      </el-table-column>\n      <el-table-column align=\"header-center\" label=\"Description\">\n        <template slot-scope=\"scope\">\n          {{ scope.row.description }}\n        </template>\n      </el-table-column>\n      <el-table-column align=\"center\" label=\"Operations\">\n        <template slot-scope=\"scope\">\n          <el-button type=\"primary\" size=\"small\" @click=\"handleEdit(scope)\">Edit</el-button>\n          <el-button type=\"danger\" size=\"small\" @click=\"handleDelete(scope)\">Delete</el-button>\n        </template>\n      </el-table-column>\n    </el-table>\n\n    <el-dialog :visible.sync=\"dialogVisible\" :title=\"dialogType==='edit'?'Edit Role':'New Role'\">\n      <el-form :model=\"role\" label-width=\"80px\" label-position=\"left\">\n        <el-form-item label=\"Name\">\n          <el-input v-model=\"role.name\" placeholder=\"Role Name\" />\n        </el-form-item>\n        <el-form-item label=\"Desc\">\n          <el-input\n            v-model=\"role.description\"\n            :autosize=\"{ minRows: 2, maxRows: 4}\"\n            type=\"textarea\"\n            placeholder=\"Role Description\"\n          />\n        </el-form-item>\n        <el-form-item label=\"Menus\">\n          <el-tree\n            ref=\"tree\"\n            :check-strictly=\"checkStrictly\"\n            :data=\"routesData\"\n            :props=\"defaultProps\"\n            show-checkbox\n            node-key=\"path\"\n            class=\"permission-tree\"\n          />\n        </el-form-item>\n      </el-form>\n      <div style=\"text-align:right;\">\n        <el-button type=\"danger\" @click=\"dialogVisible=false\">Cancel</el-button>\n        <el-button type=\"primary\" @click=\"confirmRole\">Confirm</el-button>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport path from 'path'\nimport { deepClone } from '@/utils'\nimport { getRoutes, getRoles, addRole, deleteRole, updateRole } from '@/api/role'\n\nconst defaultRole = {\n  key: '',\n  name: '',\n  description: '',\n  routes: []\n}\n\nexport default {\n  data() {\n    return {\n      role: Object.assign({}, defaultRole),\n      routes: [],\n      rolesList: [],\n      dialogVisible: false,\n      dialogType: 'new',\n      checkStrictly: false,\n      defaultProps: {\n        children: 'children',\n        label: 'title'\n      }\n    }\n  },\n  computed: {\n    routesData() {\n      return this.routes\n    }\n  },\n  created() {\n    // Mock: get all routes and roles list from server\n    this.getRoutes()\n    this.getRoles()\n  },\n  methods: {\n    async getRoutes() {\n      const res = await getRoutes()\n      this.serviceRoutes = res.data\n      this.routes = this.generateRoutes(res.data)\n    },\n    async getRoles() {\n      const res = await getRoles()\n      this.rolesList = res.data\n    },\n\n    // Reshape the routes structure so that it looks the same as the sidebar\n    generateRoutes(routes, basePath = '/') {\n      const res = []\n\n      for (let route of routes) {\n        // skip some route\n        if (route.hidden) { continue }\n\n        const onlyOneShowingChild = this.onlyOneShowingChild(route.children, route)\n\n        if (route.children && onlyOneShowingChild && !route.alwaysShow) {\n          route = onlyOneShowingChild\n        }\n\n        const data = {\n          path: path.resolve(basePath, route.path),\n          title: route.meta && route.meta.title\n\n        }\n\n        // recursive child routes\n        if (route.children) {\n          data.children = this.generateRoutes(route.children, data.path)\n        }\n        res.push(data)\n      }\n      return res\n    },\n    generateArr(routes) {\n      let data = []\n      routes.forEach(route => {\n        data.push(route)\n        if (route.children) {\n          const temp = this.generateArr(route.children)\n          if (temp.length > 0) {\n            data = [...data, ...temp]\n          }\n        }\n      })\n      return data\n    },\n    handleAddRole() {\n      this.role = Object.assign({}, defaultRole)\n      if (this.$refs.tree) {\n        this.$refs.tree.setCheckedNodes([])\n      }\n      this.dialogType = 'new'\n      this.dialogVisible = true\n    },\n    handleEdit(scope) {\n      this.dialogType = 'edit'\n      this.dialogVisible = true\n      this.checkStrictly = true\n      this.role = deepClone(scope.row)\n      this.$nextTick(() => {\n        const routes = this.generateRoutes(this.role.routes)\n        this.$refs.tree.setCheckedNodes(this.generateArr(routes))\n        // set checked state of a node not affects its father and child nodes\n        this.checkStrictly = false\n      })\n    },\n    handleDelete({ $index, row }) {\n      this.$confirm('Confirm to remove the role?', 'Warning', {\n        confirmButtonText: 'Confirm',\n        cancelButtonText: 'Cancel',\n        type: 'warning'\n      })\n        .then(async() => {\n          await deleteRole(row.key)\n          this.rolesList.splice($index, 1)\n          this.$message({\n            type: 'success',\n            message: 'Delete succed!'\n          })\n        })\n        .catch(err => { console.error(err) })\n    },\n    generateTree(routes, basePath = '/', checkedKeys) {\n      const res = []\n\n      for (const route of routes) {\n        const routePath = path.resolve(basePath, route.path)\n\n        // recursive child routes\n        if (route.children) {\n          route.children = this.generateTree(route.children, routePath, checkedKeys)\n        }\n\n        if (checkedKeys.includes(routePath) || (route.children && route.children.length >= 1)) {\n          res.push(route)\n        }\n      }\n      return res\n    },\n    async confirmRole() {\n      const isEdit = this.dialogType === 'edit'\n\n      const checkedKeys = this.$refs.tree.getCheckedKeys()\n      this.role.routes = this.generateTree(deepClone(this.serviceRoutes), '/', checkedKeys)\n\n      if (isEdit) {\n        await updateRole(this.role.key, this.role)\n        for (let index = 0; index < this.rolesList.length; index++) {\n          if (this.rolesList[index].key === this.role.key) {\n            this.rolesList.splice(index, 1, Object.assign({}, this.role))\n            break\n          }\n        }\n      } else {\n        const { data } = await addRole(this.role)\n        this.role.key = data.key\n        this.rolesList.push(this.role)\n      }\n\n      const { description, key, name } = this.role\n      this.dialogVisible = false\n      this.$notify({\n        title: 'Success',\n        dangerouslyUseHTMLString: true,\n        message: `\n            <div>Role Key: ${key}</div>\n            <div>Role Name: ${name}</div>\n            <div>Description: ${description}</div>\n          `,\n        type: 'success'\n      })\n    },\n    // reference: src/view/layout/components/Sidebar/SidebarItem.vue\n    onlyOneShowingChild(children = [], parent) {\n      let onlyOneChild = null\n      const showingChildren = children.filter(item => !item.hidden)\n\n      // When there is only one child route, the child route is displayed by default\n      if (showingChildren.length === 1) {\n        onlyOneChild = showingChildren[0]\n        onlyOneChild.path = path.resolve(parent.path, onlyOneChild.path)\n        return onlyOneChild\n      }\n\n      // Show parent if there are no child route to display\n      if (showingChildren.length === 0) {\n        onlyOneChild = { ... parent, path: '', noShowingChildren: true }\n        return onlyOneChild\n      }\n\n      return false\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.app-container {\n  .roles-table {\n    margin-top: 30px;\n  }\n  .permission-tree {\n    margin-bottom: 30px;\n  }\n}\n</style>\n"]}]}